{
  "module": "contract",
  "action": "verifysourcecode",
  "contractaddress": "0x535188e28cA7dD4d6c1321C7a14E1935fDc47242",
  "contractname": "ZetaChainUniversalToken",
  "compilerversion": "v0.8.19+commit.7dd6d404",
  "optimizationUsed": "1",
  "runs": "200",
  "sourceCode": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport \"./base/UniversalToken.sol\";\n\n/**\n * @title ZetaChainUniversalToken\n * @dev ZetaChain implementation of Universal Token with cross-chain capabilities\n * This contract includes functionality for cross-chain transfers via ZetaChain\n */\ncontract ZetaChainUniversalToken is UniversalToken {\n    // Mapping of connected contracts on other chains\n    mapping(uint256 => address) public connectedContracts;\n    \n    // ZetaChain-specific identifiers\n    uint256 public constant ZETACHAIN_ID = 7000;\n    \n    // Events\n    event ConnectedContractSet(uint256 chainId, address contractAddress);\n    event CrossChainTransferInitiated(address from, uint256 destChainId, address to, uint256 amount);\n    event CrossChainTransferReceived(uint256 sourceChainId, address from, address to, uint256 amount);\n    \n    /**\n     * @dev Constructor for ZetaChainUniversalToken\n     * @param name_ The name of the token\n     * @param symbol_ The symbol of the token\n     * @param decimals_ The number of decimals for the token\n     * @param initialSupply The initial supply of tokens to mint to the owner\n     * @param initialOwner The initial owner of the token contract\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 initialSupply,\n        address initialOwner\n    ) UniversalToken(name_, symbol_, decimals_, initialOwner) {\n        if (initialSupply > 0) {\n            _mint(initialOwner, initialSupply);\n        }\n    }\n    \n    /**\n     * @dev Sets a connected contract on another chain\n     * @param chainId The ID of the chain where the connected contract is deployed\n     * @param contractAddress The address of the connected contract\n     */\n    function setConnectedContract(uint256 chainId, address contractAddress) external onlyOwner {\n        require(chainId != ZETACHAIN_ID, \"Cannot set connected contract on ZetaChain\");\n        require(contractAddress != address(0), \"Invalid contract address\");\n        \n        connectedContracts[chainId] = contractAddress;\n        emit ConnectedContractSet(chainId, contractAddress);\n    }\n    \n    /**\n     * @dev Initiates a cross-chain transfer\n     * @param destChainId The ID of the destination chain\n     * @param recipient The address of the recipient on the destination chain\n     * @param amount The amount of tokens to transfer\n     */\n    function crossChainTransfer(uint256 destChainId, address recipient, uint256 amount) external {\n        require(destChainId != ZETACHAIN_ID, \"Cannot transfer to same chain\");\n        require(connectedContracts[destChainId] != address(0), \"No connected contract on destination chain\");\n        require(recipient != address(0), \"Invalid recipient address\");\n        require(amount > 0, \"Amount must be greater than zero\");\n        require(balanceOf(msg.sender) >= amount, \"Insufficient balance\");\n        \n        // Burn tokens on ZetaChain\n        _burn(msg.sender, amount);\n        \n        // Emit event for the cross-chain transfer\n        // In a real implementation, this would interact with ZetaChain's cross-chain messaging\n        emit CrossChainTransferInitiated(msg.sender, destChainId, recipient, amount);\n        \n        // Note: In a production implementation, this would trigger the ZetaChain\n        // cross-chain messaging system to mint tokens on the destination chain\n    }\n    \n    /**\n     * @dev Receives a cross-chain transfer (would be called by the ZetaChain connector)\n     * @param sourceChainId The ID of the source chain\n     * @param sender The address of the sender on the source chain\n     * @param recipient The address of the recipient on this chain\n     * @param amount The amount of tokens to transfer\n     */\n    function receiveCrossChainTransfer(\n        uint256 sourceChainId,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external onlyOwner {\n        require(sourceChainId != ZETACHAIN_ID, \"Cannot receive from same chain\");\n        require(connectedContracts[sourceChainId] != address(0), \"No connected contract on source chain\");\n        require(recipient != address(0), \"Invalid recipient address\");\n        require(amount > 0, \"Amount must be greater than zero\");\n        \n        // Mint tokens to the recipient on ZetaChain\n        _mint(recipient, amount);\n        \n        emit CrossChainTransferReceived(sourceChainId, sender, recipient, amount);\n    }\n} ",
  "evmversion": "paris",
  "constructorArguments": "",
  "codeformat": "solidity-single-file"
}